CREATE PACKAGE LIVRE_PACKAGE AS 
    PROCEDURE ADD_LIVRE (); 
    PROCEDURE UPDATE_LIVRE (L_ID LIVRE.IDLIVRE%type); 
    PROCEDURE UPDATE_LIVRE (L_ID LIVRE.IDLIVRE%type);
    PROCEDURE getLIVRE (L_ID LIVRE.IDLIVRE%type); 
    PROCEDURE DISPLAY_LIVRE (); 
END cust_sal; 

CREATE OR REPLACE PACKAGE BODY LIVRE_PACKAGE AS  
   
    PROCEDURE ADD_LIVRE () IS 
    DECLARE 
	    L_ID in LIVRE.IDLIVRE%TYPE;
	    L_TITRE in LIVRE.TITRE%TYPE;
	    L_AUTEUR in LIVRE.NOM_AUTEUR%TYPE;
	    L_EDITION in LIVRE.ANNEE_EDITION%TYPE;
	    L_MAISON in LIVRE.MAISON_EDITION%TYPE;

	    CNT NUMBER,
		CURSOR LISTLIVRE IS SELECT * FROM LIVRE,
		List LISTLIVRE%ROWTYPE;
		SEQ NUMBER;

    BEGIN 
    ACCEPT idT PROMPT('Entrer TITRE LIVRE :')
    L_TITRE := '&idT'
    ACCEPT idA PROMPT('Entrer AUTEUR LIVRE :')
    L_AUTEUR := '&idA'
    ACCEPT idE PROMPT('Entrer DATE EDITION LIVRE :')
    L_EDITION := '&idE'
    ACCEPT idM PROMPT('Entrer MAISON EDITION LIVRE :')
    L_MAISON := '&idM'

    SEQ = 1;

    L_ID :=SUBSTRING(L_AUTEUR,0,3)+SUBSTRING(L_TITRE,0,2)+SEQ;

    SELECT COUNT(*) INTO CNT FROM LIVRE WHERE IDLIVRE = L_ID  and L_EDITION NOT IN('2017','2021','2015')
    IF(CNT == 0)
    THEN 
	    INSERT INTO LIVRE values(L_ID,L_TITRE,L_AUTEUR,L_EDITION,L_MAISON);
	    SEQ++;
	    DBMS_OUTPUT.put_line('LIVRE ajouté avec succès');
	    OPEN LISTLIVRE;
	    LOOP
	       FETCH LISTLIVRE INTO List;
	       EXIST WHEN LISTLIVRE%notfound;
	       DBMS_OUTPUT.put_line(List);
	    ENDLOOP
	    CLOSE LISTLIVRE

    ELSE
        DBMS_OUTPUT.put_line('ID LIVRE existe déjà');
    ENDIF; 
    END ADD_LIVRE; 
END LIVRE_PACKAGE; 

CREATE OR REPLACE PACKAGE BODY LIVRE_PACKAGE AS  
   
    UPDATE_LIVRE (L_ID LIVRE.IDLIVRE%type)
    DECLARE 
	    L_TITRE in LIVRE.TITRE%TYPE;
	    L_AUTEUR in LIVRE.NOM_AUTEUR%TYPE;
	    L_EDITION in LIVRE.ANNEE_EDITION%TYPE;
	    L_MAISON in LIVRE.MAISON_EDITION%TYPE;

	    CNT NUMBER,
		CURSOR LISTLIVRE IS SELECT * FROM LIVRE,
		List LISTLIVRE%ROWTYPE;

    BEGIN 
    ACCEPT idT PROMPT('Entrer TITRE LIVRE :')
    L_TITRE := '&idT'
    ACCEPT idA PROMPT('Entrer AUTEUR LIVRE :')
    L_AUTEUR := '&idA'
    ACCEPT idE PROMPT('Entrer DATE EDITION LIVRE :')
    L_EDITION := '&idE'
    ACCEPT idM PROMPT('Entrer MAISON EDITION LIVRE :')
    L_MAISON := '&idM'

    SELECT COUNT(*) INTO CNT FROM LIVRE WHERE IDLIVRE = L_ID 
    IF(CNT != 0)
    THEN 
	    UPDATE LIVRE 
	    SET 
		    LIVRE.TITRE = L_TITRE,
		    LIVRE.NOM_AUTEUR = L_AUTEUR,
		    LIVRE.ANNEE_EDITION = L_EDITION,
		    LIVRE.MAISON_EDITON = L_MAISON	
		WHERE LIVRE.IDLIVRE= L_ID
	    DBMS_OUTPUT.put_line('LIVRE modifié avec succès');
	    OPEN LISTLIVRE;
	    LOOP
	       FETCH LISTLIVRE INTO List;
	       EXIST WHEN LISTLIVRE%notfound;
	       DBMS_OUTPUT.put_line(List);
	    ENDLOOP
	    CLOSE LISTLIVRE

    ELSE
        DBMS_OUTPUT.put_line('ID LIVRE inexistant');
    ENDIF; 
    END UPDATE_LIVRE; 
END LIVRE_PACKAGE; 

CREATE OR REPLACE PACKAGE BODY LIVRE_PACKAGE AS  
   
    REMOVE_LIVRE (L_ID LIVRE.IDLIVRE%type)
    DECLARE 
	    CNT NUMBER,
		CURSOR LISTLIVRE IS SELECT * FROM LIVRE,
		List LISTLIVRE%ROWTYPE;

    BEGIN
	    SELECT COUNT(*) INTO CNT FROM LIVRE WHERE IDLIVRE = L_ID 
	    IF(CNT != 0)
	    THEN 
		    DELETE FROM LIVRE
			WHERE LIVRE.IDLIVRE= L_ID
		    DBMS_OUTPUT.put_line('LIVRE supprimé avec succès');
		    OPEN LISTLIVRE;
		    LOOP
		       FETCH LISTLIVRE INTO List;
		       EXIST WHEN LISTLIVRE%notfound;
		       DBMS_OUTPUT.put_line(List);
		    ENDLOOP
		    CLOSE LISTLIVRE
	    ELSE
	        DBMS_OUTPUT.put_line('ID LIVRE inexistant');
	    ENDIF; 
	    END REMOVE_LIVRE; 
END LIVRE_PACKAGE; 

CREATE OR REPLACE PACKAGE BODY LIVRE_PACKAGE AS  
   
    getLIVRE (L_ID LIVRE.IDLIVRE%type)
    DECLARE 
	    CNT NUMBER,
    BEGIN
	    SELECT COUNT(*) INTO CNT FROM LIVRE WHERE IDLIVRE = L_ID 
	    IF(CNT != 0)
	    THEN 
		    SELECT * FROM LIVRE WHERE LIVRE.IDLIVRE= L_ID;
	    ELSE
	        DBMS_OUTPUT.put_line('ID LIVRE inexistant');
	    ENDIF; 
	    END getLIVRE; 
END LIVRE_PACKAGE; 

CREATE OR REPLACE PACKAGE BODY LIVRE_PACKAGE AS  
   
    DISPLAY_LIVRE()
    DECLARE 
		CURSOR LISTLIVRE IS SELECT * FROM LIVRE,
		List LISTLIVRE%ROWTYPE;
    BEGIN
	    OPEN LISTLIVRE;
	    LOOP
	       FETCH LISTLIVRE INTO List;
	       EXIST WHEN LISTLIVRE%notfound;
	       DBMS_OUTPUT.put_line(List);
	    ENDLOOP
	    CLOSE LISTLIVRE
	END DISPALY_LIVRE; 
END LIVRE_PACKAGE; 